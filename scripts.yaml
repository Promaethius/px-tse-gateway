storage:
  files:
    - path: /etc/resolv.conf
      mode: 644
      contents:
        inline: |
          nameserver 127.0.0.1
          nameserver 8.8.8.8
          nameserver 8.8.4.4
    - path: /opt/validate.sh
      mode: 755
      filesystem: root
      contents:
        inline: |
          #!/bin/bash

          validate_ip() {
              if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                  echo "$1 is a valid IPv4"
              else
                  echo "$1 is an invalid IPv4."
                  exit 1
              fi
          }

          validate_version() {
              if [[ $1 =~ ^([0-9]+\.){0,2}(\*|[0-9]+)$ ]]; then
                  echo "$1 is a valid semantic version."
              else
                  echo "$1 is an invalid semantic version."
                  exit 1
              fi
          }
    - path: /opt/router.sh
      mode: 755
      filesystem: root
      contents:
        inline: |
          #!/bin/bash
          _rules=(
              "FORWARD -i ens224 -j ACCEPT"
              "FORWARD -o ens224 -j ACCEPT"
              "DOCKER-USER -i ens192 -o ens224 -j ACCEPT"
              "DOCKER-USER -i ens224 -o ens192 -j ACCEPT"
              "POSTROUTING -t nat -o ens192 -j MASQUERADE"
          )

          _iptables() {
              for ((i = 0; i < ${#_rules[@]}; i++)); do
                  iptables $1 ${_rules[$i]}
              done
          }

          case $1 in
              apply)
                  _iptables "-A"
                  ;;
              delete)
                  _iptables "-D"
                  ;;
              *)
                  echo "router.sh
              apply:
                  Creates iptable rules that accepts FORWARD packets
                  from 'ens224' and adds a POSTROUTING rule to route
                  packets out of 'ens192'. Comptatible with DOCKER-
                  USER chains.
              delete:
                  Removes the aforementioned chains.
          "
          esac
    - path: /opt/dnsmasq.sh
      mode: 755
      filesystem: root
      contents:
        inline: |
          #!/bin/bash
          source /opt/validate.sh

          GATEWAY=${GATEWAY:=`ifconfig ens224 | grep 'inet ' | awk '{print $2}'`}
          SUBNET_MIN=${SUBNET_MIN:=$(echo $GATEWAY | cut -d . -f 1-3).$(($(echo $GATEWAY | cut -d . -f 4) + 1))}
          SUBNET_MAX=${SUBNET_MAX:=$(echo $GATEWAY | cut -d . -f 1-3).249}
          INTRA_DNS=(${INTRA_DNS:=})

          validate_ip $GATEWAY
          validate_ip $SUBNET_MIN
          validate_ip $SUBNET_MAX
          for _ip in ${INTRA_DNS[@]}; do
              validate_ip $_ip
          done

          _dockerfile='FROM alpine:latest
          RUN set -xe \
            && apk add --update --no-progress --no-cache dnsmasq \
            && mkdir -p /var/lib/dnsmasq \
            && touch /var/lib/dnsmasq/dnsmasq.leases
          CMD ["dnsmasq", "-k", "--log-facility=-"]
          '

          for _dns in ${INTRA_DNS[@]}; do
              _intra_dns="$_intra_dns
          server=$_dns"
          done

          _config="#System
          bogus-priv
          no-resolv
          dhcp-authoritative
          log-queries
          log-dhcp

          #DNS
          listen-address=127.0.0.1,$GATEWAY
          port=53
          server=8.8.8.8
          server=8.8.4.4$_intra_dns
          cache-size=1000

          #DHCP
          dhcp-range=$SUBNET_MIN,$SUBNET_MAX,24h
          dhcp-option=option:router,$GATEWAY
          dhcp-option=option:dns-server,$GATEWAY
          dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases
          "

          case $1 in
              build)
                  echo "$_dockerfile" | docker build -t dnsmasq:latest -
                  ;;
              render)
                  if [[ ! -d /etc/dnsmasq ]]; then mkdir -p /etc/dnsmasq; fi
                  echo "$_config" > /etc/dnsmasq/dnsmasq.conf
                  docker restart dnsmasq 2>/dev/null || true
                  ;;
              pre)
                  docker kill dnsmasq || true
                  docker rm dnsmasq || true
                  ;;
              run)
                  if [[ ! -f /etc/dnsmasq/dnsmasq.conf ]]; then 
                      echo "dnsmasq.sh render must be run first"
                      exit 1
                  fi
                  docker run \
                  --name dnsmasq \
                  --net host \
                  -v /etc/dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf:ro \
                  -v /var/lib/dnsmasq:/var/lib/dnsmasq \
                  --cap-add=NET_ADMIN \
                  dnsmasq:latest
                  ;;
              *)
                  echo "dnsmasq.sh
              build:
                  Builds dnsmasq container and tags as dnsmasq:latest
              render:
                  Accepts ENV vars as:
                      GATEWAY: IPv4 address that is desired for subnet
                          DNS and DHCP. This should be an IP ending in
                          .1 Defaults to ip on ens224 if.
                      SUBNET_MIN: IPv4 min address to lease. Defaults
                          to GATEWAY + 1
                      SUBNET_MAX: IPv4 max address to lease. Defaults
                          to GATEWAY.249
                      INTRA_DNS: List of IPv4 DNS servers used for
                          intranet resolution. Defaults to empty.
                  If /etc/dnsmasq/dnsmasq.conf already exists, this
                  will gracefully exit.
              run:
                  Runs dnsmasq container attached to current shell
                  session and pipes logs to stdout."
                  ;;
          esac
    - path: /opt/repo.sh
      mode: 755
      filesystem: root
      contents:
        inline: |
          #!/bin/bash
          source /opt/validate.sh

          GATEWAY=${GATEWAY:=`ifconfig ens224 | grep 'inet ' | awk '{print $2}'`}

          validate_ip $GATEWAY

          case $1 in
              pre)
                  docker kill px-repo || true
                  docker rm px-repo || true
                  docker pull portworx/px-repo:latest
                  ;;
              run)
                  docker run \
                      -p $GATEWAY:8080:8080 \
                      --name px-repo \
                      docker.io/portworx/px-repo:latest
                  ;;
              *)
                  echo "repo.sh
          run:
              Accepts ENV vars as:
                  GATEWAY: IPv4 address to bind upon.
              Pulls and runs the px-repo docker image which serves
              CentOS, Ubuntu, and Debian packages."
          esac
    - path: /opt/registry.sh
      mode: 755
      filesystem: root
      contents:
        inline: |
          #!/bin/bash
          source /opt/validate.sh

          GATEWAY=${GATEWAY:=`ifconfig ens224 | grep 'inet ' | awk '{print $2}'`}
          PX_VERSIONS=(${PX_VERSIONS:=2.6.0 2.7.0})
          K8S_VERSIONS=(${K8S_VERSIONS:=1.18.2 1.20.1})
          CALICO_VERSIONS=(${CALICO_VERSIONS:=3.15})
          CSI_VERSIONS=(${CSI_VERSIONS:=2.2.0})
          EXTRAS=(${EXTRAS:=plndr/kube-vip:0.3.2})

          validate_ip $GATEWAY
          for _version in "${PX_VERSIONS[@]} ${K8S_VERSIONS[@]} ${CALICO_VERSIONS[@]} ${CSI_VERSIONS[@]}"; do
              validate_version $_version
          done

          _config="version: 0.1
          log:
            level: info
          http:
            addr: 0.0.0.0:443
            tls:
              certificate: /etc/docker/registry/certs.d/server.crt
              key: /etc/docker/registry/certs.d/server.key
          storage:
            filesystem:
              rootdirectory: /var/lib/registry
            delete:
              enabled: false
          compatibility:
            schema1:
              enabled: true
          "

          _certificates() {
              _prefix=/etc/registry/certs.d
              if [[ ! -d $_prefix ]]; then mkdir -p $_prefix; fi
              if [[ ! -f $_prefix/rootCA.key || ! -f $_prefix/rootCA.crt ]]; then
                  openssl genrsa -out $_prefix/rootCA.key 4096
                  openssl req -x509 -new -nodes -key $_prefix/rootCA.key -sha256 -days 1024 -out $_prefix/rootCA.crt \
                      -subj "/C=US/ST=CA/L=Mountain View/O=Pure Storage/CN=`cat /etc/hostname`"
              fi
              if [[ ! -f $_prefix/server.key || ! -f $_prefix/server.crt ]]; then
                  echo "subjectAltName = IP:$GATEWAY" > $_prefix/sans.cnf
                  openssl genrsa -out $_prefix/server.key 2048
                  openssl req -new -key $_prefix/server.key -out $_prefix/server.csr \
                      -subj "/C=US/ST=CA/L=Mountain View/O=Pure Storage/CN=$GATEWAY"
                  openssl x509 -req -in $_prefix/server.csr -CA $_prefix/rootCA.crt -CAkey $_prefix/rootCA.key -CAcreateserial -out $_prefix/server.crt -days 500 -sha256 \
                      -extfile $_prefix/sans.cnf
              fi
              rm $_prefix/{rootCA.srl,server.csr}
              if [[ ! -f /etc/ssl/certs/registry.pem ]]; then
                  cp $_prefix/rootCA.crt /etc/ssl/certs/registry.pem
                  update-ca-certificates
                  systemctl restart docker || true
              fi
          }

          _load() {
              if [[ ! -d /etc/registry/certs.d ]]; then
                  echo "registry.sh certificates must be run first."
                  exit 1
              fi
              _stripper() {
                  echo "$1" | sed -e "s@docker.io/@@g;s@k8s.gcr.io/@@g;s@gcr.io/@@g;s@quay.io/@@g;s@^@$GATEWAY/@g"
              }
              _skopeo() {
                  docker run --rm --name skopeo \
                      -v /etc/ssl:/etc/ssl:ro \
                      quay.io/skopeo/stable $@
              }
              set -e
              if [[ -f /var/lib/registry/images.lock ]]; then
                  _locked_images=(`cat /var/lib/registry/images.lock | tr ' ' '\n' | sort -u | tr '\n' ' '`)
                  for _locked_image in ${_locked_images[@]}; do
                      _skopeo inspect docker://`_stripper $_locked_images` > /dev/null 2>&1
                      if [[ $? != 0 ]]; then _skopeo copy docker://$_locked_images docker://`_stripper $_locked_images`; fi
                  done
              else
                  _record() {
                      if [[ ! -d /var/lib/registry ]]; then mkdir -p /var/lib/registry; fi
                      echo "$1" >> /var/lib/registry/images.lock
                  }
                  for _px in ${PX_VERSIONS[@]}; do
                      for _k8s in ${K8S_VERSIONS[@]}; do
                          _script=`mktemp`
                          curl -o $_script -L "https://install.portworx.com/$_px/air-gapped?kbver=$_k8s" 2>/dev/null
                          if [[ $? != 0 ]]; then continue; fi
                          _images=(
                              ${_images[@]}
                              `bash $_script --dry-run pull 2>/dev/null | sed -n -e 's/^.*pull //p'`
                          )
                          rm $_script
                      done
                  done
                  for _k8s in ${K8S_VERSIONS[@]}; do
                      _images=(
                          ${_images[@]}
                          "k8s.gcr.io/kube-apiserver:v$_k8s"
                          "k8s.gcr.io/kube-controller-manager:v$_k8s"
                          "k8s.gcr.io/kube-scheduler:v$_k8s"
                          "k8s.gcr.io/kube-proxy:v$_k8s"
                      )
                      _minor=`echo $_k8s | cut -d . -f 1-2`
                      _k8s_constants="`curl https://raw.githubusercontent.com/kubernetes/kubernetes/release-$_minor/cmd/kubeadm/app/constants/constants.go 2>/dev/null`"
                      _k8s_constants="$_k8s_constants\n`curl https://raw.githubusercontent.com/kubernetes/kubernetes/release-$_minor/cmd/kubeadm/app/constants/constants_unix.go 2>/dev/null`"
                      _coredns=`echo "$_k8s_constants" | grep 'CoreDNSVersion =' | cut -d'"' -f2`
                      _etcd=`echo "$_k8s_constants" | grep 'DefaultEtcdVersion =' | cut -d'"' -f2`
                      _pause=`echo "$_k8s_constants" | grep 'PauseVersion =' | cut -d'"' -f2`
                      if [[ $_coredns != "" ]]; then _images=(${_images[@]} "k8s.gcr.io/coredns:$_coredns"); fi
                      if [[ $_etcd != "" ]]; then _images=(${_images[@]} "k8s.gcr.io/etcd:$_etcd"); fi
                      if [[ $_pause != "" ]]; then _images=(${_images[@]} "k8s.gcr.io/pause:$_pause"); fi
                  done
                  for _calico in ${CALICO_VERSIONS[@]}; do
                      _images=(
                          ${_images[@]}
                          `curl -q https://docs.projectcalico.org/v$_calico/manifests/calico.yaml 2>/dev/null | grep image: | sed -n -e 's/^.*image: //p'`
                      )
                  done
                  for _csi in ${CSI_VERSIONS[@]}; do
                      _images=(
                          ${_images[@]}
                          `curl -q https://raw.githubusercontent.com/kubernetes-sigs/vsphere-csi-driver/v$_csi/manifests/v$_csi/deploy/vsphere-csi-controller-deployment.yaml 2>/dev/null | grep image: | sed -n -e 's/^.*image: //p'`
                          `curl -q https://raw.githubusercontent.com/kubernetes-sigs/vsphere-csi-driver/v$_csi/manifests/v$_csi/deploy/vsphere-csi-node-ds.yaml 2>/dev/null | grep image: | sed -n -e 's/^.*image: //p'`
                      )
                  done
                  for _extra in ${EXTRAS[@]}; do
                      _images=(
                          ${_images[@]}
                          $_extra
                      )
                  done
                  _images=(`echo "${_images[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '`)
                  for _image in ${_images[@]}; do
                      if [[ $? != 0 ]]; then continue; fi
                      _skopeo copy docker://$_image docker://`_stripper $_image`
                      _record $_image
                  done
              fi
              set e
          }

          case $1 in
              certificates)
                  _certificates
                  ;;
              load)
                  _load
                  ;;
              pre)
                  docker kill registry registry-loader || true
                  docker rm registry registry-loader || true
                  docker pull registry:2
                  ;;
              run)
                  if [[ ! -d /etc/registry ]]; then mkdir -p /etc/registry; fi
                  if [[ ! -f /etc/registry/config.yml ]]; then
                      echo "$_config" > /etc/registry/config.yml
                  fi
                  if [[ `ls /etc/registry/certs.d` == "" ]]; then
                      echo "registry.sh certificates must be run first."
                      exit 1
                  fi
                  docker run \
                      --name registry \
                      -v /etc/registry/certs.d:/etc/docker/registry/certs.d:ro \
                      -v /etc/registry/config.yml:/etc/docker/registry/config.yml:ro \
                      -v /var/lib/registry:/var/lib/registry \
                      -p $GATEWAY:443:443 \
                      registry:2
                  ;;
              *)
                  echo "registry.sh
          certificates:
              Accepts ENV vars as:
                  GATEWAY: 
                      Defaults to the IPv4 address set on ens224.
              Generates a sane self-signed cert chain that registry:2
              can accept.
          load:
              Requires registry.sh certificates to be run first.
              Accepts ENV vars as:
                  PX_VERSIONS:
                      Space deliniated Portworx versions without leading
                      'v'.
                  K8S_VERSIONS:
                      Space deliniated Kubernetes versions without leading
                      'v'.
                  CALICO_VERSIONS:
                      Space deliniated Calico versions without leading
                      'v'.
                  CSI_VERSIONS:
                      Space deliniated vSphere CSI versions without leading
                      'v'.
                  EXTRAS:
                      Space deliniated container images to be loaded.
              Parses upstream interfaces to provide container images to
              the registry. Requires that a registry is NOT already running
              on the system. Downloads, retags, uploads locally, and cleans.
          run:
              Requires registry.sh certificates to be run first.
              Accepts ENV vars as:
                  GATEWAY: 
                      Defaults to the IPv4 address set on ens224.
              Runs and attaches a registry docker instance to the current
              bash session. Waits for registry-loader to finish before
              executing.
          "
          esac
    - path: /opt/etcd.sh
      mode: 755
      filesystem: root
      contents:
        inline: |
          #!/bin/bash
          source /opt/validate.sh

          GATEWAY=${GATEWAY:=`ifconfig ens224 | grep 'inet ' | awk '{print $2}'`}

          case $1 in 
              pre)
                  docker kill etcd || true
                  docker rm etcd || true
                  docker pull quay.io/coreos/etcd:latest
                  ;;
              run)
                  _hostname=`cat /etc/hostname`
                  docker run \
                      -p ${GATEWAY}:2379:2379 \
                      -p ${GATEWAY}:2380:2380 \
                      --name etcd \
                      quay.io/coreos/etcd:latest \
                      /usr/local/bin/etcd \
                      --data-dir=/etcd-data \
                      --name $_hostname \
                      --initial-advertise-peer-urls http://$GATEWAY:2380 \
                      --listen-peer-urls http://0.0.0.0:2380 \
                      --advertise-client-urls http://$GATEWAY:2379 \
                      --listen-client-urls http://0.0.0.0:2379 \
                      --initial-cluster $_hostname=http://$GATEWAY:2380
                  ;;
          esac